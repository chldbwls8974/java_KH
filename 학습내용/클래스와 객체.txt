
	[클래스]
		객체(현실의 정보)의 속성과 기능을 코드로 구현한 것
		멤버변수, 메서드, 생성자로 구성
		속성: 멤버변수   ------------------------------------------------------------->> 객체 속성 : 사물을 나타낼 수 잇는 정보
 		기능: 메소드 ----------------------------------------------------------↘     따로 초기화 하지 않아도 각 타입의 기본값으로 초기화됨	ex) 대학생의 학번, 이름, 학년 등등.....
									 ↘	     							대학생 클래스의 멤버변수는 학번, 이름, 학년이 되는것임.
		클래스를 정의한다:: 객체를 클래스를 구현하는 것.  == 추상화


		(접근 제어자) class 클래스명{
			(접근 제어자) 멤버변수;
			(접근 제어자) 메서드;  ((main 같은,, 기능을 가진,,,)
		}



	[함수]
		하나의 기능을 수행하는 일련의 코드
		필요한 기능을 미리 구현해놓고 필요할 때마다 호출하여 사용
		매개변수: 함수를 실행하기 위해 필요한 정보
			매개변수는 없을 수 있다.

		- 출력
		반환값: 함수가 실행 후 알려주는 값
		반환값이 필요없는 경우 반환타입을 void로 설정

		- 정의하기
			반환타입 함수명(매개변수들){
				구현;
				return 값;
			}


	[메서드]
		public void A(){}
		함수가 기능이라면 메서드는 객체에 있는 기능
		자바에 나온느 모든 기능은 메서드
		함수는 필요한 정보를 모드 ㅐ개변수로 전달
		메서드는 클래스의 기능이기때문에 일부 정보는 클래스의 멤버 변수로 가져올 수 있음.
	
		- 메서드 오버로딩
			동일한 이름의 메소드가 여러개인 경우
			조건( 결론 : 매개변수가 다름)
				1. 매개변수의 개수가 다름
				2. 매개변수의 타입이 다름



	[추상화]
		현실에 있는 정보를 클래스로 만드는 작업
		성적과 같이 여러조건들로 상태가 계속 바뀌는 정보를 다룰때 사용하면 편리함.

	- 객체 생성하기
		클래스명 객체명 = new 클래스명();
		new:  객체를 생성하는 예약어
		클래스명() : 생성자 :: 객체를 초기화 하는 예약어



	[생성자]
		public A(){}  	※ 리턴타입이 없음에 주의
		인스턴스(객체)의 멤버변수나 상수를 초기화하는 것
		편리 => 멤버를 한번에 쉽게 초기화 가능
		메서드와 비슷하게 생김 
			(특징)
				이름이 클래스 이름과 같다.
				메서드와 비교했을 때 리턴타입이 없다. => void가 아니라 아예 없다.
		
		- 디폴트 생성자(기본 생성자)			
			매개변수가 없는 생성자			ex) Student studentkim = new Student();  <= 괄호 안에 매개변수가 없다.
			클래스의 생성자가 하나도 없을 때 자동으로 추가가 됨  		ex) 
			기본 생성자가 없는 경우도 있음 ( ex: Scanner )


	
	[스택 메모리]
		메서드 호출과 관련된 정보를 저장하는 영역
		메서드 호출 시 매개변수, 지역변수, 복귀 주소 등이 저장



	[ 힙 메모리]
		동적으로 할당된 객체들이 저장되는 영역 (new 키워드)
		확장 축소 가능
		사용되지 않는 객체는 GC(가비지 컬렉터)에 의해 제거
		객체의 인스턴스 변수, 배열 등


	[생성자 오버로딩]
		여러종류의 생성자를 만들 수 있다.
		

	[접근 제어자]
		private : 자신
		default (생략가능) : 자신 + 같은 패키지
		protected :  자신 클래스 + 같은 패키지 + 자식 클래스
		public : 모두

	
	[정보은닉]
		클래스 내부에서 사용할 변수나 메서드를 private으로 선언해서 외부에서의 접근을 막는 것
		일반적으로 멤버변수는 private
			메서드는 public
			생성자는 public, 싱글톤의 경우 private



	[호출]
		객체명.멤버변수 = 값;	// 대체로 특별한 경우만 사용
		객체명.메서드명(매개변수들);



	[this]
		생성된 인스턴스 스스로를 가르키는 예약어.
		자신의 주소 반환
		주로 생성자나 메서드에서 멤버 변수와 매개변수를 구분할 때 사용 == 멤버변수와 매개변수 명이 같은 경우 사용

		- this() 
			생성자가 여러개인 경우 다른 생성자를 호출할때 사용
			다른 생성자 호출 시 첫 라인에 써야하며 다른 라인에 쓰면 에러 발생
			무한루프 주의



	[ static ]
		(접근제어자) static 자료형 변수명;
		하나의 클래스로 만든 모든 객체가 공통적인 값을 가지는 속성이 있는경우
		프로그램이 실행되어 메모리에 올라갔을때 한번만 할당
		클래스변수라고도 함 (static이 안붙은 변수는 객체변수라고도 함)
		
	- static 메서드
		클래스 메서드라고도 함.
		객체 생성 없이 호출 가능.
	
		- 호출방법
		클래스명.메서드명(매개변수);		ex)  Math.sqrt();


	[ 클래스 메서드 vs 객체 메서드 ]
		클래스 메서드 안에서
			클래스 변수를 사용할 수 있다.
			객체 변수를 직접 사용 할 수 없다 ( 객체 생성 후에는 가능)
			객체 메서드 직접 호출할 수 없다. ( 객체 생성 후에는 가능)
			클래스 메서드는 객체가 생성되기 전에 만들어지는데, 객체 메서드는 객체가 할당되어야 만들어짐.
			그래서 객체가 만들어지기 전엔 클래스 메서드에서 객체 변수와 메서드를 사용할 수 없다.




	[ 변수 유효범위 ]
		- 지역 변수
			메서드에서 선언된 변수
			선언 된 범위안에서 사용가능
			스택메모리에 생성
			메서드 반환 시 메모리 공간이 해제되면서 없어짐

		- 멤버 변수
			객체 변수 (인스턴스 변수)
			힙메모리에 생성
			객체가 GC에 의해 수거될 때 해제 됨
			클래스 안에 있는 모든 객체 메서드

		- 클래스 변수
			프로그램 영역 중 데이터 영역(상수, 문자열, 클래스변수)에 생성
			프로그램이 종료될 때 해제	
			static 변수를 너무 크게 잡지 말자 >> 프로그램이 종료될 때 해제 되기 때문에 메모리할당량이 너무 크면 좋지 않기 때문


	
	[single tone]
		인스턴스를 단 하나만 생성하는 디자인 패턴
			1. 생성자: private
			2. 클래스 변수를 이용하여 인스턴스 생성
			3. 2번에서 만든 객체를 외부에서 참조할 수 있는 public 메서드 생성
			4. 사용(호출)





	[추상클래스]
		구체적이지 않은,,,,
		구현부가 없는 메서드
		>> 메서드가 동작하기 위해서 어떤 매개변수가 필요하고
		     동작이 끝난 후에 ........ 헷

		부모클래스로 상속을 할 때 사용
		abstract 리턴타입 메서드명(매개변수들);

		- 추상클래스 상속
			추상클래스를 상속받으면~~
			추상클래스가 되거나
			부모 클래스의 추상 메서드를 오버라이딩한 클래스가 된다.(일반클래스)
		
		- 추상클래스와 객체
			추상 메서드가 있다는 건 기능 구현이 없다는 것으로
			객체를 만들 수 없다

		

	[final]
		변수 앞에 붙으면 > 상수			※ 리터럴과 상수의 차이
							리터럴 :: 값이 변할 수 없는 숫자 자체 또는 문자열 자체 
							상수 :: 값이 변하지 않는 변수, 이름이 있는 리터럴

		메서드 앞에 붙으면 오버라이딩 불가
		클래스에 붙으면 부모 클래스가 될 수 없음



	[wrapper]
		시

































