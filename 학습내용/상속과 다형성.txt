
	접근제어자 protected : 부모 클래스에서 같은 패키지의 클래스와 자식 클래스에서만 접근 가능하게 하고 싶을 대 사용
		
		 private : 부모 클래스에서 자식 클래스에서도 사용 하지 못하게 할 때 *( 물려는 받음, 사용을 못함)


	super
		부모 클래스 객체의 주소를 알고있는 예약어
	super()
		부모 클래스의 생성자를 호출
		자식 클래스의 생성에서 첫 줄에 씀
		자식 클래스의 생성자는 반드시 부모 생성자를 호출
		없다면 기본 부모 생성

	
	오버라이딩
		부모 클래스에 있는 메서드 재정의
		(생략가능) @Override 어노테이션을 붙일 수 있다.
			-오버라이딩한 메서드임을 알려주고, 문법에 맞는지 체크해주는 역할
		리턴타입, 메서드명, 매개변수는 수정하면 안됨.
		접근제어자 넓은 범위로 수정하는 것은 가능. 좁히는건 불가능          ※ 부모클래스의 메서드 A가 public 이면 자식클래스에서 오버라이딩할 대 public만 가능

		매개변수를 건들게 되면 오버로딩
	



	클래스의 형변환 : 상속관계인 부모 자식 객체에서만 가능
		다운캐스팅 : 부모 > 자식 (조건부로 가능)
			- 자동으로 안됨.
			- 반드시 (자식클래스명)으로 처리
			- 조건부로 가능 : 업캐스팅 된 객체를 다운캐스팅 하는 경우

			부모클래스 객체명1 = new 부모클래스생성자();
			자식클래스 객체명2 = (자식클래스) 객체명1; // 불가능

			부모클래스 객체명1 = new 자식클래스생성자();
			자식클래스 객체명2 = (자식클래스) 객체명1; // 가능
			

		업캐스팅 : 자식 > 부모 (가능)
			- 자동으로 변환된
			부모클래스명 객체명 = new 자식클래스생성자();
			부모클래스명 객체명 = 자식클래스객체명;

		

	instanceof 연산자
		클래스 형변환이 가능한지 확인하는 연산자
		if( 객체 instanceof 클래스){}

		

	다형성
		하나의 코드에 여러 자료형이 올 수 있는것
		
		- 매개변수 다형성 
			메서드의 매개변수로 부모클래스의 객체가 오면 매개변수에 자식 클래스의 객체를 이용할 수 있다.
			
		- 포함 다형성
			
			
		- 재정의 다형성
			상속된 각 클래스마다 오버라이딩을 이용하여 메서드를 재정의 할 수 있다.
















































